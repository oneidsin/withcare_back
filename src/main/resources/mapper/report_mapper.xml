<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.withcare.report.dao.ReportDAO">

<!-- 신고 카테고리 불러오기 -->
<select id="reportCateList" resultType="map">
  SELECT * FROM report_category
</select>

<!-- 신고 카테고리 중복 체크 -->
<select id="checkDuplicateCate" parameterType="map" resultType="int">
  SELECT COUNT(*) 
  FROM report_category 
  WHERE cate_name = #{cate_name}
</select>

<!-- 신고 카테고리 수정 시 중복 체크 (현재 카테고리 제외) -->
<select id="checkDuplicateCateForUpdate" parameterType="map" resultType="int">
  SELECT COUNT(*) 
  FROM report_category 
  WHERE cate_name = #{cate_name}
  AND rep_cate_idx != #{rep_cate_idx}
</select>

<!-- 신고 카테고리 추가 -->
<insert id="reportCateAdd" parameterType="map">
  INSERT INTO report_category (cate_name, cate_active_yn)
  VALUES (#{cate_name}, true)
</insert>

<!-- 신고 카테고리 수정 -->
<update id="reportCateUpdate" parameterType="map">
  UPDATE report_category
  SET cate_name = #{cate_name}
  WHERE rep_cate_idx = #{rep_cate_idx}
</update>

<!-- 신고 카테고리 활성화 여부 -->
<update id="reportCateActive" parameterType="map">
  UPDATE report_category
  SET cate_active_yn = #{cate_active_yn}
  WHERE rep_cate_idx = #{rep_cate_idx}
</update>



<!-- 유저가 신고하는 기능들 -->
<!-- 신고하기 전 중복 체크 -->
<select id="checkDuplicateReport" parameterType="map" resultType="int">
  SELECT COUNT(*) 
  FROM report 
  WHERE reporter_id = #{reporter_id}
  AND rep_item_type = #{rep_item_type}
  AND rep_item_idx = #{rep_item_idx}
</select>

<!-- 신고하기 -->
<insert id="report" parameterType="com.withcare.report.dto.ReportDTO" useGeneratedKeys="true" keyProperty="rep_idx">
  INSERT INTO report (
  reporter_id,
  reported_id,
  rep_cate_idx,
  rep_item_type,
  status,
  rep_item_idx
  ) VALUES (
  #{reporter_id},
  #{reported_id},
  #{rep_cate_idx},
  #{rep_item_type},
  '미처리',
  #{rep_item_idx}
  )
</insert>

<!-- 중복 신고 확인 -->
<select id="isDuplicateReport" resultType="boolean">
  SELECT COUNT(*) > 0
  FROM report
  WHERE reporter_id = #{reporterId}
  AND rep_item_idx = #{itemIdx}
  AND rep_item_type = #{itemType}
</select>

<!-- 카테고리 유효성 검사 -->
<select id="checkCategoryValid" resultType="boolean">
  SELECT COUNT(*) > 0
  FROM report_category
  WHERE rep_cate_idx = #{categoryIdx}
  AND cate_active_yn = true
</select>

<!-- 게시물 작성자 ID 조회 -->
<select id="postWriter" resultType="string">
  SELECT id 
  FROM post 
  WHERE post_idx = #{itemIdx}
</select>

<!-- 댓글 작성자 ID 조회 -->
<select id="commentWriter" resultType="string">
  SELECT id 
  FROM comment 
  WHERE com_idx = #{itemIdx}
</select>

<!-- 멘션 작성자 ID 조회 -->
<select id="mentionWriter" resultType="string">
  SELECT men_writer_id 
  FROM mention 
  WHERE men_idx = #{itemIdx}
</select>

<!-- 신고 히스토리 리스트에 등록 -->
<insert id="insertReportHistory" parameterType="map">
  INSERT INTO report_history (
    rep_idx,
    rep_admin_id,
    rep_yn
  ) VALUES (
    #{rep_idx},
    #{rep_admin_id},
    '미처리'
  )
</insert>

<select id="reportList" resultType="map">
  SELECT
    r.rep_idx,
    r.report_at,
    r.rep_item_type,
    r.rep_item_idx,
    r.reporter_id,
    r.reported_id,
    rc.cate_name,
    CASE
      WHEN r.rep_item_type = '게시글' THEN p.post_title
      WHEN r.rep_item_type = '댓글' THEN c.com_content
      WHEN r.rep_item_type = '멘션' THEN m.men_content
      ELSE '알 수 없음'
      END AS `reported_content`,
    rh.rep_list_idx,
    rh.process_date,
    rh.rep_admin_id,
    rh.rep_yn,
    rh.rep_reason
  FROM
    report r
      LEFT JOIN report_history rh ON r.rep_idx = rh.rep_idx
      LEFT JOIN report_category rc ON r.rep_cate_idx = rc.rep_cate_idx
      LEFT JOIN post p ON r.rep_item_idx = p.post_idx AND r.rep_item_type = '게시글'
      LEFT JOIN comment c ON r.rep_item_idx = c.com_idx AND r.rep_item_type = '댓글'
      LEFT JOIN mention m ON r.rep_item_idx = m.men_idx AND r.rep_item_type = '멘션'
  ORDER BY
    r.report_at DESC, rh.process_date DESC;
</select>

<select id="reportView" parameterType="int" resultType="map">
  SELECT
    r.rep_idx,
    r.report_at,
    r.rep_item_type,
    r.rep_item_idx,
    r.reporter_id,
    r.reported_id,
    rc.cate_name,
    CASE
      WHEN r.rep_item_type = '게시글' THEN p.post_title
      WHEN r.rep_item_type = '댓글' THEN c.com_content
      WHEN r.rep_item_type = '멘션' THEN m.men_content
      ELSE '알 수 없음'
      END AS `reported_content`,
    rh.rep_list_idx,
    rh.process_date,
    rh.rep_admin_id,
    rh.rep_yn,
    rh.rep_reason
  FROM
    report_history rh
      JOIN report r ON r.rep_idx = rh.rep_idx
      LEFT JOIN report_category rc ON r.rep_cate_idx = rc.rep_cate_idx
      LEFT JOIN post p ON r.rep_item_idx = p.post_idx AND r.rep_item_type = '게시글'
      LEFT JOIN comment c ON r.rep_item_idx = c.com_idx AND r.rep_item_type = '댓글'
      LEFT JOIN mention m ON r.rep_item_idx = m.men_idx AND r.rep_item_type = '멘션'
  WHERE
    rh.rep_list_idx = #{rep_list_idx}
</select>

<update id="reportProcess" parameterType="map">
  UPDATE report_history
  SET rep_admin_id = #{rep_admin_id},
  rep_yn = #{rep_yn},
  rep_reason = #{rep_reason},
  process_date = NOW()
  WHERE rep_list_idx = #{rep_list_idx}
</update>


</mapper>